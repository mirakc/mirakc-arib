name: cross-build

on:
  workflow_call:

jobs:
  cross-build:
    strategy:
      matrix:
        arch:
          # Disabled because there is no linux/arm/v5 image of ubuntu.
          # - armel
          - armhf
          - arm64
        include:
          # - arch: armel
          #   host-triple: arm-linux-gnueabi
          #   elf-machine: 'ARM'
          #   elf-flags: 'soft-float'
          #   docker-platform: linux/arm/v5
          - arch: armhf
            host-triple: arm-linux-gnueabihf
            elf-machine: 'ARM'
            elf-flags: 'hard-float'
            docker-platform: linux/arm/v7
          - arch: arm64
            host-triple: aarch64-linux-gnu
            elf-machine: 'AArch64'
            elf-flags: ''
            docker-platform: linux/arm64/v8
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Cache for external projects
        uses: actions/cache@v4
        with:
          path: build/vendor
          key: ${{ runner.os }}-cross-build-${{ matrix.arch }}-${{ hashFiles('CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-cross-build-${{ matrix.arch }}-
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends autoconf automake cmake dos2unix g++-${{ matrix.host-triple }} libtool make ninja-build pkg-config
      - name: Generate project files
        run: |
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=Release -D MIRAKC_ARIB_TEST=ON -D CMAKE_TOOLCHAIN_FILE=toolchain.cmake.d/debian-${{ matrix.arch }}.cmake .
      - name: Build vendor libraries
        run: |
          ninja -C build vendor
      - name: Build
        run: |
          ninja -C build
      - name: Check the binary format
        run: |
          readelf -h build/bin/mirakc-arib | grep Machine | grep '${{ matrix.elf-machine }}'
          readelf -h build/bin/mirakc-arib | grep Flags | grep '${{ matrix.elf-flags }}'
      - name: Setup QEMU user-mode emulation
        uses: docker/setup-qemu-action@v3
      - name: Show help and version
        run: |
          sudo apt-get install -y --no-install-recommends lsb-release
          docker run --rm -v $(pwd)/build:/build --platform ${{ matrix.docker-platform }} ubuntu:$(lsb_release -cs) /build/bin/mirakc-arib -h
          docker run --rm -v $(pwd)/build:/build --platform ${{ matrix.docker-platform }} ubuntu:$(lsb_release -cs) /build/bin/mirakc-arib --version
      - name: Run tests
        run: |
          docker run --rm -e CI=$CI -v $(pwd)/build:/build --platform ${{ matrix.docker-platform }} ubuntu:$(lsb_release -cs) /build/bin/mirakc-arib-test --gtest_shuffle
          docker run --rm -e CI=$CI -v $(pwd)/build:/build -v $(pwd)/test:/test --platform ${{ matrix.docker-platform }} ubuntu:$(lsb_release -cs) sh /test/cli_tests.sh /build/bin/mirakc-arib
